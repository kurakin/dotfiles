#!/usr/bin/env node
// vim: filetype=javascript

var querystring = require('querystring');
var request = require('request');
var program = require('commander');
var util = require('util');
var async = require('async');

program
  .version('0.0.1');

var rootUri = 'https://jira.tripadvisor.com/rest/api/2/'

var myIssues='(Engineer = currentUser() OR assignee = currentUser()) AND resolution = unresolved ORDER BY priority DESC, created ASC';
var workedIssues='(Engineer = currentUser() or assignee = currentUser()) and issueFunction in workLogged("after %d/%d/%d") ORDER BY priority DESC, created ASC'

var issueFields = [
  'key',
  'summary',
  'issuetype',
  'status',
  'priority',
  'reporter',
  'assignee',
  'description',
  'fixVersions',
  'resolution',
  'resolutiondate',
  'aggregateprogress',
  'customfield_10001', // themes
  'customfield_10006', // epic
  'customfield_10313', // engineer
  'customfield_10307', // tech lead
  'customfield_10309', // qa status
  'customfield_10308', // on/off site
  'customfield_10304', // steak status
  'customfield_10207', // formal qa required
  'customfield_10104', // product manager
  'customfield_10300', // pm sign-off
  'customfield_10400', // launch date
  'customfield_10311'  // code review
];

function Issue(json){
  this.id = json.key;
  this.summary = json.fields.summary;
  this.description = json.fields.description;
  this.type = json.fields.issuetype.name;
  this.status = json.fields.status.name;
  this.priority = json.fields.priority.name;
  this.reporter = json.fields.reporter.name;
  this.assignee = json.fields.assignee.name;
  this.fixVersions = json.fields.fixVersions.map(function(o){ return o.name; });
  this.resolution = json.fields.resolution;
  this.resolutionDate = json.fields.resolutiondate;
  this.progress = json.fields.aggregateprogress;
  this.epic = json.fields.customfield_10006;
  this.themes = json.fields.customfield_10001;
  this.pm = json.fields.customfield_10300.value;
  this.engineers = json.fields.customfield_10313.map(function(o){ return o.name; });
  this.lead = json.fields.customfield_10307.name;
  this.qaStatus = json.fields.customfield_10309 && json.fields.customfield_10309.value;
  this.onOffSite = json.fields.customfield_10308 && json.fields.customfield_10308.value;
  this.steakStatus = json.fields.customfield_10304 && json.fields.customfield_10304.value;
  this.formalQA = json.fields.customfield_10207 && json.fields.customfield_10207.value;
  this.launchDate = json.fields.customfield_10400;
  this.codeReview = json.fields.customfield_10311 && json.fields.customfield_10311.slice(1,-1).split('|')[0];
}

Issue.prototype.loadWorkLog = function(callback){
  var self = this;
  request({
    url: rootUri + 'issue/' + this.id + '/worklog'
  , headers: {
      'Authorization': 'Basic ' + process.env['SVNTR_AUTH']
    }
  , strictSSL: false
  },
  function(err, res, body){
    if (err) {
      console.error(err);
      process.exit(1);
    }
    if (res.statusCode === 200) {
      var data = JSON.parse(body);
      self.worklogs = data.worklogs.map(function(log){
        return {
          author: log.author.name
        , started: log.started
        , time: log.timeSpentSeconds
        , comment: log.comment || null
        };
      });
    }
    callback && callback();
  });
  return this;
}

String.prototype.lpad = function(len, c){
  if (this.length < len) {
    return new Array(len - this.length + 1).join(c || ' ') + this;
  }
  return this;
};

String.prototype.rpad = function(len, c){
  if (this.length < len) {
    return this + new Array(len - this.length + 1).join(c || ' ');
  }
  return this;
};

program
  .command('todo')
  .description('List issues you are working on.')
  .action(function(){
    request({
      url: rootUri + 'search',
      qs: {
        jql: myIssues,
        fields: issueFields.join(',')
      },
      headers: {
        'Authorization': 'Basic ' + process.env['SVNTR_AUTH']
      },
      strictSSL: false
    },
    function(err, res, body){
      if (err) {
        console.error(err);
        process.exit(1);
      }
      if (res.statusCode === 200) {
        [['ID', 'Status', 'Priority', 'Summary']]
          .concat(
            JSON.parse(body)
              .issues
              .map(function(i){ return new Issue(i); })
              .map(function(i){
                return [i.id, i.status, i.priority, i.summary];
              })
          )
          .map(function(arr){
            arr[0] = arr[0].rpad(11);
            arr[1] = arr[1].rpad(12);
            arr[2] = arr[2].rpad(14);
            return arr;
          })
          .forEach(function(arr){ console.log.apply(this, arr); });
      } else {
        console.error(body);
      }
    });
  });

program
  .command('worked')
  .description('List issues worked this week')
  .action(function(){
    var date = new Date();
    date.setDate(date.getDate() - (date.getDay() - 1));
    jql = util.format(workedIssues, date.getFullYear(), date.getMonth()+1, date.getDate());
    request({
      url: rootUri + 'search',
      qs: {
        jql: jql
      , fields: issueFields.join(',')
      },
      headers: {
        'Authorization': 'Basic ' + process.env['SVNTR_AUTH']
      },
      strictSSL: false
    },
    function(err, res, body){
      if (err) {
        console.error(err);
        process.exit(1);
      }
      if (res.statusCode === 200) {
        var issues = JSON.parse(body).issues
          .map(function(i){
            return new Issue(i);
          });
        async.each(issues, function(i, cb){
          i.loadWorkLog(cb);
        }, function(err){
          [['ID', 'Time', 'Status', 'Priority', 'Summary']]
            .concat(
              issues.map(function(i){
                var time = i.worklogs ? i.worklogs.reduce(function(time, log){
                  return time + new Date(log.started).getTime() > date.getTime() ? log.time : 0;
                }, 0) : 0;
                return [i.id, time/60/60 + 'h', i.status, i.priority, i.summary];
              })
            )
            .map(function(arr){
              arr[0] = arr[0].rpad(11);
              arr[1] = arr[1].lpad(5).rpad(6);
              arr[2] = arr[2].rpad(12);
              arr[3] = arr[3].rpad(14);
              return arr;
            })
            .forEach(function(arr){ console.log.apply(this, arr); });
        });
      } else {
        console.error(body);
      }
    });
  });

program
  .command('logwork <issue> <duration>')
  .description('Log work on an issue.')
  .option('-s, --started <timestamp>', 'Timestamp when work was started')
  .option('-m, --message <message>', 'Log message')
  .action(function(issue, duration, options){
    var params = {
      url: rootUri + 'issue/' + issue + '/worklog',
      headers: {
        'Authorization': 'Basic ' + process.env['SVNTR_AUTH']
      },
      strictSSL: false,
      method: 'POST',
      json: {
        timeSpent: duration
      }
    };
    if (options.started) {
      params.json.started = new Date(options.started);
    }
    if (options.message) {
      params.json.comment = options.message;
    }
    request(params,
    function(err, res, body){
      if (err) {
        console.error(err);
        process.exit(1);
      } else if (res.statusCode !== 201) {
        console.log(res.statusCode);
        console.error(body);
        process.exit(1);
      }
    });
  });

program.parse(process.argv);
